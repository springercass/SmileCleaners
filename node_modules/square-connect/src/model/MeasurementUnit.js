/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 */
var ApiClient = require('../ApiClient');
var MeasurementUnitCustom = require('./MeasurementUnitCustom');




/**
 * The MeasurementUnit model module.
 * @module model/MeasurementUnit
 */

/**
 * Constructs a new <code>MeasurementUnit</code>.
 * Represents a unit of measurement to use with a quantity, such as ounces or inches. Exactly one of the following fields are required: &#x60;custom_unit&#x60;, &#x60;area_unit&#x60;, &#x60;length_unit&#x60;, &#x60;volume_unit&#x60;, and &#x60;weight_unit&#x60;.  The &#x60;family&#x60; field describes the type of measurement. For example, ounces are in the weight family.
 * @alias module:model/MeasurementUnit
 * @class
 */
var exports = function() {
  var _this = this;






};

/**
 * Constructs a <code>MeasurementUnit</code> from a plain JavaScript object, optionally creating a new instance.
 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
 * @param {Object} data The plain JavaScript object bearing properties of interest.
 * @param {module:model/MeasurementUnit} obj Optional instance to populate.
 * @return {module:model/MeasurementUnit} The populated <code>MeasurementUnit</code> instance.
 */
exports.constructFromObject = function(data, obj) {
  if (data) {
    obj = obj || new exports();

      if (data.hasOwnProperty('custom_unit')) {
      obj['custom_unit'] = MeasurementUnitCustom.constructFromObject(data['custom_unit']);
    }
      if (data.hasOwnProperty('area_unit')) {
      obj['area_unit'] = ApiClient.convertToType(data['area_unit'], 'String');
    }
      if (data.hasOwnProperty('length_unit')) {
      obj['length_unit'] = ApiClient.convertToType(data['length_unit'], 'String');
    }
      if (data.hasOwnProperty('volume_unit')) {
      obj['volume_unit'] = ApiClient.convertToType(data['volume_unit'], 'String');
    }
      if (data.hasOwnProperty('weight_unit')) {
      obj['weight_unit'] = ApiClient.convertToType(data['weight_unit'], 'String');
    }
    }
  return obj;
}

/**
 * A custom unit of measurement defined by the seller using the Point of Sale app or ad-hoc as an order line item.
 * @member {module:model/MeasurementUnitCustom} custom_unit
 */
exports.prototype['custom_unit'] = undefined;
/**
 * Represents a standard area unit. See [MeasurementUnitArea](#type-measurementunitarea) for possible values
 * @member {module:model/MeasurementUnit.AreaUnitEnum} area_unit
 */
exports.prototype['area_unit'] = undefined;
/**
 * Represents a standard length unit. See [MeasurementUnitLength](#type-measurementunitlength) for possible values
 * @member {module:model/MeasurementUnit.LengthUnitEnum} length_unit
 */
exports.prototype['length_unit'] = undefined;
/**
 * Represents a standard volume unit. See [MeasurementUnitVolume](#type-measurementunitvolume) for possible values
 * @member {module:model/MeasurementUnit.VolumeUnitEnum} volume_unit
 */
exports.prototype['volume_unit'] = undefined;
/**
 * Represents a standard unit of weight or mass. See [MeasurementUnitWeight](#type-measurementunitweight) for possible values
 * @member {module:model/MeasurementUnit.WeightUnitEnum} weight_unit
 */
exports.prototype['weight_unit'] = undefined;


  /**
   * Allowed values for the <code>area_unit</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AreaUnitEnum = {
    /**
     * value: "IMPERIAL_ACRE"
     * @const
     */
    "IMPERIAL_ACRE": "IMPERIAL_ACRE",
    /**
     * value: "IMPERIAL_SQUARE_INCH"
     * @const
     */
    "IMPERIAL_SQUARE_INCH": "IMPERIAL_SQUARE_INCH",
    /**
     * value: "IMPERIAL_SQUARE_FOOT"
     * @const
     */
    "IMPERIAL_SQUARE_FOOT": "IMPERIAL_SQUARE_FOOT",
    /**
     * value: "IMPERIAL_SQUARE_YARD"
     * @const
     */
    "IMPERIAL_SQUARE_YARD": "IMPERIAL_SQUARE_YARD",
    /**
     * value: "IMPERIAL_SQUARE_MILE"
     * @const
     */
    "IMPERIAL_SQUARE_MILE": "IMPERIAL_SQUARE_MILE",
    /**
     * value: "METRIC_SQUARE_CENTIMETER"
     * @const
     */
    "METRIC_SQUARE_CENTIMETER": "METRIC_SQUARE_CENTIMETER",
    /**
     * value: "METRIC_SQUARE_METER"
     * @const
     */
    "METRIC_SQUARE_METER": "METRIC_SQUARE_METER",
    /**
     * value: "METRIC_SQUARE_KILOMETER"
     * @const
     */
    "METRIC_SQUARE_KILOMETER": "METRIC_SQUARE_KILOMETER"  };

  /**
   * Allowed values for the <code>length_unit</code> property.
   * @enum {String}
   * @readonly
   */
  exports.LengthUnitEnum = {
    /**
     * value: "IMPERIAL_INCH"
     * @const
     */
    "IMPERIAL_INCH": "IMPERIAL_INCH",
    /**
     * value: "IMPERIAL_FOOT"
     * @const
     */
    "IMPERIAL_FOOT": "IMPERIAL_FOOT",
    /**
     * value: "IMPERIAL_YARD"
     * @const
     */
    "IMPERIAL_YARD": "IMPERIAL_YARD",
    /**
     * value: "IMPERIAL_MILE"
     * @const
     */
    "IMPERIAL_MILE": "IMPERIAL_MILE",
    /**
     * value: "METRIC_MILLIMETER"
     * @const
     */
    "METRIC_MILLIMETER": "METRIC_MILLIMETER",
    /**
     * value: "METRIC_CENTIMETER"
     * @const
     */
    "METRIC_CENTIMETER": "METRIC_CENTIMETER",
    /**
     * value: "METRIC_METER"
     * @const
     */
    "METRIC_METER": "METRIC_METER",
    /**
     * value: "METRIC_KILOMETER"
     * @const
     */
    "METRIC_KILOMETER": "METRIC_KILOMETER"  };

  /**
   * Allowed values for the <code>volume_unit</code> property.
   * @enum {String}
   * @readonly
   */
  exports.VolumeUnitEnum = {
    /**
     * value: "GENERIC_FLUID_OUNCE"
     * @const
     */
    "GENERIC_FLUID_OUNCE": "GENERIC_FLUID_OUNCE",
    /**
     * value: "GENERIC_SHOT"
     * @const
     */
    "GENERIC_SHOT": "GENERIC_SHOT",
    /**
     * value: "GENERIC_CUP"
     * @const
     */
    "GENERIC_CUP": "GENERIC_CUP",
    /**
     * value: "GENERIC_PINT"
     * @const
     */
    "GENERIC_PINT": "GENERIC_PINT",
    /**
     * value: "GENERIC_QUART"
     * @const
     */
    "GENERIC_QUART": "GENERIC_QUART",
    /**
     * value: "GENERIC_GALLON"
     * @const
     */
    "GENERIC_GALLON": "GENERIC_GALLON",
    /**
     * value: "IMPERIAL_CUBIC_INCH"
     * @const
     */
    "IMPERIAL_CUBIC_INCH": "IMPERIAL_CUBIC_INCH",
    /**
     * value: "IMPERIAL_CUBIC_FOOT"
     * @const
     */
    "IMPERIAL_CUBIC_FOOT": "IMPERIAL_CUBIC_FOOT",
    /**
     * value: "IMPERIAL_CUBIC_YARD"
     * @const
     */
    "IMPERIAL_CUBIC_YARD": "IMPERIAL_CUBIC_YARD",
    /**
     * value: "METRIC_MILLILITER"
     * @const
     */
    "METRIC_MILLILITER": "METRIC_MILLILITER",
    /**
     * value: "METRIC_LITER"
     * @const
     */
    "METRIC_LITER": "METRIC_LITER"  };

  /**
   * Allowed values for the <code>weight_unit</code> property.
   * @enum {String}
   * @readonly
   */
  exports.WeightUnitEnum = {
    /**
     * value: "IMPERIAL_WEIGHT_OUNCE"
     * @const
     */
    "IMPERIAL_WEIGHT_OUNCE": "IMPERIAL_WEIGHT_OUNCE",
    /**
     * value: "IMPERIAL_POUND"
     * @const
     */
    "IMPERIAL_POUND": "IMPERIAL_POUND",
    /**
     * value: "IMPERIAL_STONE"
     * @const
     */
    "IMPERIAL_STONE": "IMPERIAL_STONE",
    /**
     * value: "METRIC_MILLIGRAM"
     * @const
     */
    "METRIC_MILLIGRAM": "METRIC_MILLIGRAM",
    /**
     * value: "METRIC_GRAM"
     * @const
     */
    "METRIC_GRAM": "METRIC_GRAM",
    /**
     * value: "METRIC_KILOGRAM"
     * @const
     */
    "METRIC_KILOGRAM": "METRIC_KILOGRAM"  };


module.exports = exports;



